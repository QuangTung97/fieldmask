// Code generated by fieldmask; DO NOT EDIT.

package generated

import (
	"github.com/QuangTung97/fieldmask"
	pb "github.com/QuangTung97/fieldmask/testdata/pb"
)

type ProviderFieldMask struct {
	keepFunc func(newMsg *pb.Provider, msg *pb.Provider)
}

func NewProviderFieldMask(fields []string) (*ProviderFieldMask, error) {
	fieldInfos, err := fieldmask.ComputeFieldInfos(fields)
	if err != nil {
		return nil, err
	}

	return &ProviderFieldMask{
		keepFunc: pb_Provider_ComputeKeepFunc(fieldInfos),
	}, nil
}

type ProductFieldMask struct {
	keepFunc func(newMsg *pb.Product, msg *pb.Product)
}

func NewProductFieldMask(fields []string) (*ProductFieldMask, error) {
	fieldInfos, err := fieldmask.ComputeFieldInfos(fields)
	if err != nil {
		return nil, err
	}

	return &ProductFieldMask{
		keepFunc: pb_Product_ComputeKeepFunc(fieldInfos),
	}, nil
}

func pb_Provider_ComputeKeepFunc(fieldInfos []fieldmask.FieldInfo) func(newMsg *pb.Provider, msg *pb.Provider) {
	if len(fieldInfos) == 0 {
		return func(newMsg *pb.Provider, msg *pb.Provider) {
			*newMsg = *msg
		}
	}

	var subFuncs []func(newMsg *pb.Provider, msg *pb.Provider)

	for _, field := range fieldInfos {
		switch field.JsonName {
		case "id":
			subFuncs = append(subFuncs, pb_Provider_Keep_Id)
		case "name":
			subFuncs = append(subFuncs, pb_Provider_Keep_Name)
		case "logo":
			subFuncs = append(subFuncs, pb_Provider_Keep_Logo)
		case "imageUrl":
			subFuncs = append(subFuncs, pb_Provider_Keep_ImageUrl)
		}
	}

	return func(newMsg *pb.Provider, msg *pb.Provider) {
		for _, fn := range subFuncs {
			fn(newMsg, msg)
		}
	}
}

func pb_Product_ComputeKeepFunc(fieldInfos []fieldmask.FieldInfo) func(newMsg *pb.Product, msg *pb.Product) {
	if len(fieldInfos) == 0 {
		return func(newMsg *pb.Product, msg *pb.Product) {
			*newMsg = *msg
		}
	}

	var subFuncs []func(newMsg *pb.Product, msg *pb.Product)

	for _, field := range fieldInfos {
		switch field.JsonName {
		case "sku":
			subFuncs = append(subFuncs, pb_Product_Keep_Sku)
		case "provider":
			subFuncs = append(subFuncs, func(newMsg *pb.Product, msg *pb.Product) {
				keepFunc := pb_Provider_ComputeKeepFunc(field.SubFields)

				newSubMsg := &pb.Provider{}
				keepFunc(newSubMsg, msg.Provider)
				newMsg.Provider = newSubMsg
			})
		case "attributes":
			subFuncs = append(subFuncs, func(newMsg *pb.Product, msg *pb.Product) {
				keepFunc := pb_Attribute_ComputeKeepFunc(field.SubFields)

				msgList := make([]*pb.Attribute, 0, len(msg.Attributes))
				for _, e := range msg.Attributes {
					newSubMsg := &pb.Attribute{}
					keepFunc(newSubMsg, e)
					msgList = append(msgList)
				}
				newMsg.Attributes = msgList
			})
		}
	}

	return func(newMsg *pb.Product, msg *pb.Product) {
		for _, fn := range subFuncs {
			fn(newMsg, msg)
		}
	}
}

func pb_Attribute_ComputeKeepFunc(fieldInfos []fieldmask.FieldInfo) func(newMsg *pb.Attribute, msg *pb.Attribute) {
	if len(fieldInfos) == 0 {
		return func(newMsg *pb.Attribute, msg *pb.Attribute) {
			*newMsg = *msg
		}
	}

	var subFuncs []func(newMsg *pb.Attribute, msg *pb.Attribute)

	for _, field := range fieldInfos {
		switch field.JsonName {
		case "id":
			subFuncs = append(subFuncs, pb_Attribute_Keep_Id)
		case "code":
			subFuncs = append(subFuncs, pb_Attribute_Keep_Code)
		case "name":
			subFuncs = append(subFuncs, pb_Attribute_Keep_Name)
		}
	}

	return func(newMsg *pb.Attribute, msg *pb.Attribute) {
		for _, fn := range subFuncs {
			fn(newMsg, msg)
		}
	}
}

// =========================================
// Provider Keep Functions
// =========================================

func pb_Provider_Keep_Id(newMsg *pb.Provider, msg *pb.Provider) {
	newMsg.Id = msg.Id
}

func pb_Provider_Keep_Name(newMsg *pb.Provider, msg *pb.Provider) {
	newMsg.Name = msg.Name
}

func pb_Provider_Keep_Logo(newMsg *pb.Provider, msg *pb.Provider) {
	newMsg.Logo = msg.Logo
}

func pb_Provider_Keep_ImageUrl(newMsg *pb.Provider, msg *pb.Provider) {
	newMsg.ImageUrl = msg.ImageUrl
}

// =========================================
// Product Keep Functions
// =========================================

func pb_Product_Keep_Sku(newMsg *pb.Product, msg *pb.Product) {
	newMsg.Sku = msg.Sku
}

// =========================================
// Attribute Keep Functions
// =========================================

func pb_Attribute_Keep_Id(newMsg *pb.Attribute, msg *pb.Attribute) {
	newMsg.Id = msg.Id
}

func pb_Attribute_Keep_Code(newMsg *pb.Attribute, msg *pb.Attribute) {
	newMsg.Code = msg.Code
}

func pb_Attribute_Keep_Name(newMsg *pb.Attribute, msg *pb.Attribute) {
	newMsg.Name = msg.Name
}
