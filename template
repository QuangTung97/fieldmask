// Code generated by fieldmask; DO NOT EDIT.

package {{ .PackageName }}

import (
	"github.com/QuangTung97/fieldmask/fields"
	{{ range .Imports }}{{ . }}
{{ end -}}
)

{{ range .TypeAndNewFuncs }}
type {{ .StructName }} struct {
	keepFunc {{ .FuncType }}
}

func New{{ .StructName }}(maskedFields []string, options ...fields.Option) (*{{ .StructName}}, error) {
	fieldInfos, err := fields.ComputeFieldInfos(maskedFields, options...)
	if err != nil {
		return nil, err
	}

	keepFunc, err := {{ .ComputeKeepFuncName }}(fieldInfos)
	if err != nil {
		return nil, err
	}

	return &{{ .StructName }}{
		keepFunc: keepFunc,
	}, nil
}

func (fm *{{.StructName}}) Mask(msg *{{ .QualifiedType }}) *{{ .QualifiedType }} {
	newMsg := &{{ .QualifiedType }}{}
	fm.keepFunc(newMsg, msg)
	return newMsg
}
{{ end }}

{{ range .KeepFuncs }}
func {{ .FuncName }}(fieldInfos []fields.FieldInfo) ({{ .FuncType }}, error) {
	if len(fieldInfos) == 0 {
		return {{ .FuncType }} {
			*newMsg = *msg
		}, nil
	}

	var subFuncs []{{ .FuncType }}

	for _, field := range fieldInfos {
		isSimpleField := true

		switch field.JsonName {
		{{ range .FieldFuncs }}case "{{ .JsonName }}":
			{{ .AppendStmt }}
		{{ end -}}
		default:
			return nil, fields.ErrFieldNotFound(field.JsonName)
		}

		if isSimpleField && len(field.SubFields) > 0 {
			return nil, fields.PrependParentField(fields.ErrFieldNotFound(field.SubFields[0].JsonName), field.JsonName)
		}
	}

	return {{ .FuncType }} {
		for _, fn := range subFuncs {
			fn(newMsg, msg)
		}
	}, nil
}

{{ end -}}
{{ range .KeepFuncs }}
// =========================================
// {{ .TypeName }} Keep Functions
// =========================================
{{ range .ImplFieldFuncs }}
func {{ .FuncName }}(newMsg *{{ .QualifiedType }}, msg *{{ .QualifiedType }}) {
	newMsg.{{ .FieldName }} = msg.{{ .FieldName }}
}
{{ end }}
{{ end }}
