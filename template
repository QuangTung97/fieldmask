// Code generated by fieldmask; DO NOT EDIT.

package {{ .PackageName }}

import (
	"github.com/QuangTung97/fieldmask"
	{{ range .Imports }}{{ . }}
{{ end -}}
)

{{ range .TypeAndNewFuncs }}
type {{ .StructName }} struct {
	keepFunc {{ .FuncType }}
}

func New{{ .StructName }}(fields []string) (*{{ .StructName}}, error) {
	fieldInfos, err := fieldmask.ComputeFieldInfos(fields)
	if err != nil {
		return nil, err
	}

	return &{{ .StructName }}{
		keepFunc: {{ .ComputeKeepFuncName }}(fieldInfos),
	}, nil
}
{{ end }}

{{ range .KeepFuncs }}
func {{ .FuncName }}(fieldInfos []fieldmask.FieldInfo) {{ .FuncType }} {
	if len(fieldInfos) == 0 {
		return {{ .FuncType }} {
			*newMsg = *msg
		}
	}

	var subFuncs []{{ .FuncType }}

	for _, field := range fieldInfos {
		switch field.JsonName {
		{{ range .FieldFuncs }}case "{{ .JsonName }}":
			{{ .AppendStmt }}
		{{ end }} }
	}

	return {{ .FuncType }} {
		for _, fn := range subFuncs {
			fn(newMsg, msg)
		}
	}
}

{{ end -}}
{{ range .KeepFuncs }}
// =========================================
// {{ .TypeName }} Keep Functions
// =========================================
{{ range .ImplFieldFuncs }}
func {{ .FuncName }}(newMsg *{{ .QualifiedType }}, msg *{{ .QualifiedType }}) {
	newMsg.{{ .FieldName }} = msg.{{ .FieldName }}
}
{{ end }}
{{ end }}
